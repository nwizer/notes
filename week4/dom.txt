Changing HTML Elements
 
Changing HTML elements dynamically is a fundamental aspect of web development, and JavaScript provides several methods to achieve this. Here are some commonly used methods for changing HTML elements:
innerHTML:
Purpose: Changes the HTML content (including tags) of an element.
Example:
document.getElementById("myElement").innerHTML = "New content";
textContent:
Purpose: Changes the text content of an element, excluding HTML tags.
Example:
document.getElementById("myElement").textContent = "New text content";
setAttribute:
Purpose: Sets the value of an attribute on an element.
Example:
document.getElementById("myElement").setAttribute("class", "newClass");
style:
Purpose: Modifies the inline styles of an element.
Example:
document.getElementById("myElement").style.color = "blue";
classList:
Purpose: Provides methods to add, remove, or toggle CSS classes on an element.
Examples:
document.getElementById("myElement").classList.add("newClass");
document.getElementById("myElement").classList.remove("oldClass");
appendChild:
Purpose: Adds a new child element to an existing element.
Example:
var newElement = document.createElement("p");
newElement.textContent = "New paragraph";
document.getElementById("parentElement").appendChild(newElement);
removeChild:
Purpose: Removes a child element from its parent.
Example:
var childToRemove = document.getElementById("childElement");
document.getElementById("parentElement").removeChild(childToRemove);
setAttribute:
Purpose: Sets or changes the value of an attribute on an HTML element.
Example:
document.getElementById("myElement").setAttribute("src", "new-image.jpg");
 
These methods provide a diverse set of tools for us â€”developers to manipulate HTML elements dynamically, whether it's updating content, changing styles, or modifying attributes. The choice of method depends on the specific requirement and the nature of the change you want to apply.
 
Example - using setAttribute to change an input field to a button:
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Input to Button Example</title>
</head>
<body>

    <input type="text" id="myInput" value="Type Something">
    <button onclick="changeToButton()">Change to Button</button>

    <script>
        function changeToButton() {
            // Get the input element
            var inputElement = document.getElementById("myInput");

            // Create a new button element
            var buttonElement = document.createElement("button");

            // Set attributes for the new button
            buttonElement.setAttribute("type", "button");
            buttonElement.setAttribute("onclick", "alert('Button Clicked!')");
            buttonElement.innerHTML = "Click Me";

            // Replace the input with the new button
            inputElement.parentNode.replaceChild(buttonElement, inputElement);
        }
    </script>

</body>
</html>
 
In this example, an input field with the id "myInput" is initially present, alongside a button labeled "Change to Button." Clicking this button triggers the changeToButton function, wherein a new button is dynamically created using createElement. Key attributes (type and onclick) are set via setAttribute, and the input field is promptly replaced by this newly fashioned button using replaceChild. The outcome is a dynamic transformation, demonstrating the capability to swap an input field for a button upon clicking "Change to Button," complete with an onclick attribute for interactive functionality.
 
Adding HTML Elements:
 
createElement Method:
Purpose: Creates a new HTML element.
Example:
var newElement = document.createElement("div");
appendChild Method:
Purpose: Appends a new child element to an existing element.
Example:
var parentElement = document.getElementById("parent");
parentElement.appendChild(newElement);
insertBefore Method:
Purpose: Inserts a new element before a specified existing element.
Example:
var existingElement = document.getElementById("existing");
parentElement.insertBefore(newElement, existingElement);
innerHTML Property:
Purpose: Sets or gets the HTML content inside an element.
Example:
parentElement.innerHTML = "<p>New content</p>";
insertAdjacentHTML Method:
Purpose: Inserts HTML into a specified position relative to the element.
Example:
parentElement.insertAdjacentHTML("beforeend", "<p>New content</p>");
 
Deleting HTML Elements:
 
removeChild Method:
Purpose: Removes a child element from its parent.
Example:
var childElement = document.getElementById("child");
parentElement.removeChild(childElement);
remove Method (Modern Browsers):
Purpose: Removes the element itself.
Example:
var elementToRemove = document.getElementById("toRemove");
elementToRemove.remove();
replaceChild Method:
Purpose: Replaces a child element with a new element.
Example:
var newChildElement = document.createElement("span");
parentElement.replaceChild(newChildElement, oldChildElement);
innerHTML Property (Setting to an Empty String):
Purpose: Sets the HTML content inside an element to an empty string, effectively removing its content.
Example:
parentElement.innerHTML = "";
outerHTML Property:
Purpose: Replaces an element with its HTML content.
Example:
var newHTML = "<p>New content</p>";
parentElement.outerHTML = newHTML;

